// This experiment tests the sensitivity of somatic voltage on AP propagation from a side branch

load_file("nrngui.hoc") // Load nrngui.hoc, the main executable for NEURON
load_file("simulation_base.hoc") // Load simulation_base.hoc, which contains all information for simulations
dt = 0.005 // Set time step in simulations

// Declare new variables in this file:
objref cutoff_file
strdef cutoff_file_name,run_file_name

// In regular run, want parameters to be set specifically by arguments, otherwise fail.
// Parameters to set are: ratio, vs, layer.
// Ratio = ratio between main axon and branch
// vs = somatic voltage, set as e_pas in the soma
// layer = neocortical layer to based model on

// Assume g_basket=0, g_chand=0, reversal potentials are -70, -50 respectively
// Vary the somatic voltage through the passive current: g_pas=2e-3, e_pas=-80 mV, -70 mV, -60 mV, -50 mV
// Assume IS leak is (e_pas = -70, g_pas = 1e-3)

// Some default values to get started, normally passed in as variables
ratio = 3 // ratio between main axon and branch, options are typically 2, 3, 4, 6
vs = -70 // somatic voltage, options are typically -80, -70, -60
layer = 5 // options are 2, 4, 5

load_axon(8,4,ratio,layer,0) // Create a new axon with parameters:
// type=8 - BranchDistCell, used for branch propagation experiments
// kinetics=4 - modified Traub kinetics (naf_Traub.mod, kdf_Traub.mod)
// This function also sets up a stimulus in the axon and other global parameters.

//setup_session() // Open windows in NEURON to see simulation interactively.

if(test_axon.stim_loc==0){ quit() } // If axon didn't set up correctly, end program.

// Open a new file to record gNa cutoffs
cutoff_file = new File() 
sprint(cutoff_file_name,"vs-expcell_L%d-rat%g-vs%d-dt%g.out",layer,ratio,vs,dt)
//sprint(cutoff_file_name,"/projectnb/msprfmun/neuron/vs-expcell_L%d-rat%g-vs%d.out",layer,ratio,vs)
cutoff_file.wopen(cutoff_file_name)

set_soma_leak(test_axon,vs,2e-3) // Set soma leak/passive current
//set_basket(test_axon,-70,0) // Leftover 
//set_g_chand(0,1)

dist1_beg = 0 // Starting distance for branch
dist1_end = 4 // Ending distance for branch
d_dist = 0.2 // Step size for distances to try
n_iter = (dist1_end-dist1_beg)/d_dist + 1 // Total number of distances to try

for(j=0;j<n_iter;j=j+1){    // Skip for-loop to start

    dist = dist1_beg + j*d_dist
    print "distance=", dist
    cutoff_file.printf("%g\t",dist)
    sprint(run_file_name,"vs-expcell-run_L%d-rat%g-vs%d-dt%g-d%g.out",layer,ratio,vs,dt,dist)
    
    test_axon.connect_branch(2,dist,4) // Connect compartment 2 (1st compartment available for branches) to main axon at distance "dist". Make the electronic length of the branch 4.
    
    
    run_search(cutoff_file,run_file_name,3) // Run a search for the gNa cutoffs. Put the cutoffs found in "cutoff_file", and the results of each simulation in "run_file_name". Find the gNa up to 3 decimal places.
    
    //refine_search(cutoff_file,run_file_name,4) // Use this function to modify an existing search file
    
}

//quit()
